// File: backend/db/dbConnection.js


const mongoose = require("mongoose");

const connectDB = async () => {
  try {
    await mongoose.connect('mongodb://localhost:27017/auth');
    
    console.log("MongoDB connected successfully");
  } catch (err) {
    console.error("Error connecting to MongoDB:", err);
    process.exit(1); // Exit process with failure
  }
};

module.exports = connectDB;

// File: backend/db/user.js
const mongoose = require("mongoose");

const UserSchema = new mongoose.Schema({
    username:{
        type:String,
        required:true,
        unique:true
    },
    password:{
        type:String,
        required:true
    }
})

const User = mongoose.model('User',UserSchema);

module.exports = User;
// File: backend/server.js
const express = require("express");
const app = express();
const port = 3000;
const connectDB = require("./db/dbConnection");
const user = require("./db/user");
const cors = require("cors");

//middleware for parsing json data
app.use(express.json());

//enable cors
app.use(cors());

//registration
app.post("/register", async (req, res) => {
  try {
    const { username, password } = req.body;
    const newUser = new user({ username, password });
    await newUser.save();
    res.status(201).json({ message: "User registered successfully" });
  } catch (error) {
    console.log(error)
    res.status(500).json({ error: "Registration failed" });
  }
});

//login
app.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    const foundUser = await user.findOne({ username });

    if (!foundUser) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    if (foundUser.password !== password) {
      return res.status(401).json({ error: "Invalid credentials " });
    }
    res.status(200).json({ message: "Login successful" });
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: "Login failed" });
  }
});

app.listen(port, () => {
  connectDB();
  console.log(`Server is running on port ${port}`);
});

// File: frontend/index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>auth</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

// File: frontend/src/App.css
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap');

:root {
  --bg-color: #121212;
  --surface-color: #1e1e1e;
  --primary-color: #bb86fc;
  --text-color: #ffffff;
  --text-secondary-color: #b3b3b3;
}

body {
  background-color: var(--bg-color);
  color: var(--text-color);
  font-family: 'Roboto', sans-serif;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.container {
  background-color: var(--surface-color);
  border-radius: 8px;
  padding: 2rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 350px;
}

h1 {
  color: var(--primary-color);
  text-align: center;
  margin-bottom: 1.5rem;
  font-weight: 500;
  font-size: 2rem;
}

form {
  display: flex;
  flex-direction: column;
}

.form-group {
  position: relative;
  margin-bottom: 1.5rem;
}

input {
  width: 95%;
  padding: 0.75rem;
  border: none;
  border-radius: 4px;
  background-color: rgba(255, 255, 255, 0.05);
  color: var(--text-color);
  font-size: 1rem;
  transition: all 0.3s ease;
  margin:0.7rem;
}

input::placeholder {
  color: var(--text-secondary-color);
}

input:focus {
  outline: none;
  background-color: rgba(255, 255, 255, 0.1);
  box-shadow: 0 0 0 2px var(--primary-color);
}

.form-group i {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  color: var(--text-secondary-color);
  transition: all 0.3s ease;
}

.form-group input:focus + i {
  color: var(--primary-color);
}

button {
  background-color: var(--primary-color);
  color:white;
  border: none;
  border-radius: 4px;
  padding: 0.75rem;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
  margin-top: 1rem;
}

button:hover {
  background-color: #9965f4;
}

p {
  text-align: center;
  margin-top: 1rem;
  color: var(--text-secondary-color);
}

a {
  color: var(--primary-color);
  text-decoration: none;
  transition: all 0.3s ease;
}

a:hover {
  text-decoration: underline;
}
// File: frontend/src/App.jsx
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import RegisterPage from './RegisterPage'; 
import LoginPage from './LoginPage'; 
import './App.css';

const App = () => {
  return (
    <div>
      <BrowserRouter>
        <Routes>
          <Route path='/' element={<Navigate to='/login' />} />
          <Route path='/login' element={<LoginPage />} />
          <Route path='/register' element={<RegisterPage />} />
        </Routes>
      </BrowserRouter>
    </div>
  );
};

export default App;

// File: frontend/src/index.css
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

// File: frontend/src/LoginPage.jsx
import React from 'react'
import { useState } from 'react';
import axios from 'axios';
import {Link} from 'react-router-dom';


const LoginPage = () => {

  const [loginData, setLoginData] =useState({
    username: '',
    password: ''
  });

    const handleLoginChange = (e) => {
      const {name, value} = e.target;
      setLoginData((prevData) =>({
        ...prevData,
        [name]: value
      
      }))
    }

    //submit
    const handleLoginSubmit = async(e) =>{
      e.preventDefault();

      try {
        const response = await axios.post('http://localhost:3000/login', loginData);
        const {success, message} = response.data;
        if(success){
          console.log(message);
        } else {
          console.log(message);
        }
      } catch (error) {
        console.log(error);
      }
      setLoginData({
        username: '',
        password: ''
      })
      alert('Login successful');
    }

  return (
    <div className='container'>
      <h1>Login</h1>
      <form onSubmit={handleLoginSubmit}>
        <input type='text' placeholder='username' name='username'
        value={loginData.username}
        onChange={handleLoginChange}/>

        <input type='password' placeholder='password' name='password'
        value={loginData.password}
        onChange={handleLoginChange}/>

        <button type='submit'>Login</button>
        <p>
          Not registered? <a href='/register'>Register</a>
        </p>
      </form>
    </div>
  )
}

export default LoginPage

// File: frontend/src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

// File: frontend/src/RegisterPage.jsx
import React from 'react'
import { useState } from 'react';
import axios from 'axios';
import {Link} from 'react-router-dom';

const RegisterPage = () => {
  const [registrationData, setRegistrationData] = useState({ 
    username: '',
    password: ''
  });

  const handleRegistrationChange  = (e) => {
    const {name, value} = e.target;
    setRegistrationData((prevData) => ({
      ...prevData,
      [name]: value
    }))
    
  }

  const handleRegistrationSubmit = async(e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:3000/register', registrationData);
      console.log(response.data);
    } catch (error) {
      console.error("Registration error:", error.response ? error.response.data : error.message);
    }
    setRegistrationData({
      username: '',
      password: '',
    })

  }

  return (
    <div className='container'>
      <h1>Register</h1>
      <form onSubmit={handleRegistrationSubmit}>
        <input type='text' placeholder='username' value={registrationData.username} name='username' required onChange={handleRegistrationChange}/>
        <input type='password' placeholder='password' value={registrationData.password} name='password' required onChange={handleRegistrationChange}/>
        <button type='submit'>Register</button>
        <p>
          already registered? <Link to='/login'>Login</Link>
        </p>
      </form>
    </div>
  )
}

export default RegisterPage

// File: frontend/vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})

